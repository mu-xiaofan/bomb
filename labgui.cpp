// generated by Fast Light User Interface Designer (fluid) version 1.0304

#include "labgui.h"

Fl_Box *field=(Fl_Box *)0;

Fl_Box *bb=(Fl_Box *)0;

static void cb_Go(Fl_Button*, void*) {
  std::cout << "ouch" <<std::endl;
Fl::add_timeout(1.0, move);
}

Fl_Value_Input *initial_v=(Fl_Value_Input *)0;

Fl_Double_Window* make_window() {
  Fl_Double_Window* w;
  { Fl_Double_Window* o = new Fl_Double_Window(225, 225);
    w = o; if (w) {/* empty */}
    { field = new Fl_Box(0, 0, 225, 225);
      Fl_PNG_Image* bg = new Fl_PNG_Image("field.png");
      field->image( bg );
    } // Fl_Box* field
    { bb = new Fl_Box(102, 205, 10, 20);
      Fl_PNG_Image* bi = new Fl_PNG_Image("l.png");
      bb->image(bi);
    } // Fl_Box* bb
    { Fl_Button* o = new Fl_Button(5, 205, 70, 20, "Go");
      o->callback((Fl_Callback*)cb_Go);
    } // Fl_Button* o
    { initial_v = new Fl_Value_Input(60, 16, 40, 24, "initial_v");
      initial_v->color((Fl_Color)172);
      initial_v->labelcolor((Fl_Color)131);
    } // Fl_Value_Input* initial_v
    o->end();
  } // Fl_Double_Window* o
  return w;
}

void move(void*) {
  // initialize these values only the first time
  static double dt = 0.01;
  static double x = bb->parent()->w()/2 - bb->w()/2;    //center
  static double y = bb->parent()->h() -bb->h();   //bottom
  static double s=0;
  static double v0 = initial_v->value();//get input
  static double v=v0;
  static const double g=-9.81;// it is easier to calculate when we use the negative.
  v+=g*dt;//the reason wht it is plus g is that we used g=-9.81.
  s+=v*dt;
  
  y = bb->parent()->h()-s-bb->h();//translate s into y.
  
  
  bb->position(x,y);// the position in the x-y coordinary system
  bb->parent()->redraw();
  std::cout<<"distance: "<<s <<std::endl;
  std::cout<<"now the velocity is : "<<v<<std::endl;
  
  if(s>0)//to control it to hit the earth.
  {
  Fl::repeat_timeout(0.01, move);
  }
}
